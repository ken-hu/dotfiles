#!/usr/bin/env python3
import glob, re, os, sys

'''
Update the section
/*
 * =====================================================================================
 *
 *       Filename:  filename.cc
 *
 *    Description:  the file description 
 *        Created:  06/11/2016 15:33:49
 *
 *         Author:  Ken Hu, xnchnhu@gmail.com
 *
 * =====================================================================================
 */
 <code>
/*
 * ===  FUNCTION  ======================================================================
 *         Name:  theFunctionName
 *  Description:  the description for the function
 * =====================================================================================
 */
 <code>
 To doxygen comment format
/**
 * @file
 * Brief the file description
 */
 <code>
 /**
 * the description for the function
 * @param FILL-ME-IN
 * @return FILL-ME-IN
 */
 <code>
 '''
def refactorComments(file):
    print ("Refactoring", file)
    
    # Read the file to a string
    fileHandle = open(file, 'r')
    fileString = fileHandle.read()
    fileHandle.close()
    
    # Update the file string
    # /\*, match '/*'
    # .*?, match everything non-greedy
    # \*/, match '*/'    
    pattern = "/\*(.*?)\*/"
    matched = re.findall(pattern, fileString, re.DOTALL)
    for match in matched:
        # Extract corresponding section and add to subst
        isFileHeader = re.search("Filename:\s\s(.*?)\n", match)
        isFunctionHeader = re.search("Name:\s\s(.*?)\n", match)
        description = re.search("Description:\s\s(.*?)\n", match)
        if isFileHeader and description:
            fileName = isFileHeader.group(1);
            fileDescription = description.group(1) 
            substFileHeader = "/**\n * @file " + fileName + "\n * @brief " + fileDescription + "\n * @author Ken Hu, xnchnhu@gmail.com\n */"
            # /\*, match '/*'
            # [^/]*, match everything except '/' many times
            # re.escape, escape regex if any
            # .*?, match everything non-greedy
            # \*/, match '*/'
            pattern = "/\*[^/]*" + re.escape(isFileHeader.group()) + ".*?\*/"
            fileString = (re.sub(pattern, substFileHeader, fileString, 0, re.DOTALL))
        if isFunctionHeader and description:
            functionDescription = description.group(1)
            substFunctionHeader = "/**\n * @brief " + functionDescription + "\n * @param FILL-ME-IN\n * @return FILL-ME-IN\n */"
            pattern = "/\*[^/]*" + re.escape(isFunctionHeader.group()) + ".*?\*/" # error-prone when having overloaded functions
            patternMatched = re.search(pattern, fileString, re.DOTALL);
            fileString = (re.sub(pattern, substFunctionHeader, fileString, 0, re.DOTALL))
    
    # Write new file string to the file.
    # Using mode 'w' to truncate.
    fileHandle = open(file, 'w')
    fileHandle.write(fileString)
    fileHandle.close()

fileTypes = ('*/src/*.cc', '*/include/*.h')
filelist = []
for type in fileTypes:
    filelist.extend(glob.glob(type))
filelist.sort()
for file in filelist:
    refactorComments(file)

